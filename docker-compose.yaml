services:
  redis:
    image: redis:alpine3.20
    hostname: ${REDIS_HOST}
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - "${REDIS_PORT}:6379"
    environment:
      TZ: ${TIME_ZONE}
    volumes:
      - redis_data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  postgres:
    image: postgres:15.8-alpine
    hostname: ${POSTGRES_HOST}
    environment:
      TZ: ${TIME_ZONE}
      PGTZ: ${TIME_ZONE}
      POSTGRES_DB: ${POSTGRES_NAME}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app_network
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_NAME}'" ]
      interval: 10s
      timeout: 5s
      retries: 5

  users_service_migrate:
    build:
      context: ./users_service
      dockerfile: Dockerfile
    command: bash -c "
      python manage.py migrate
      "
    env_file:
      - .env
    volumes:
      - ./users_service:/users_service
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app_network

  users_service_test:
    build:
      context: ./users_service
      dockerfile: Dockerfile
    command: bash -c "
      python manage.py test
      "
    env_file:
      - .env
    volumes:
      - ./users_service:/users_service
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      users_service_migrate:
        condition: service_completed_successfully
    networks:
      - app_network

  users_service:
    hostname: localhost
    build:
      context: ./users_service
      dockerfile: Dockerfile
    command: bash -c "
      python manage.py runserver 0.0.0.0:80
      "
    env_file:
      - .env
    volumes:
      - ./users_service:/users_service
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      users_service_migrate:
        condition: service_completed_successfully
      users_service_test:
        condition: service_completed_successfully
    ports:
      - "80:80"
    networks:
      - app_network


volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  users_service_volume:

networks:
  app_network:
    driver: bridge
